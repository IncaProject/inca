/*
 * DatabaseTools.java
 */
package edu.sdsc.inca.depot.persistent;


import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.hibernate.HibernateException;
import org.hibernate.cfg.Configuration;
import org.hibernate.tool.hbm2ddl.SchemaExport;


/**
 *
 * @author Paul Hoover
 *
 */
public class DatabaseTools {

  /**
   *
   */
  private enum IdentifierCase {
    LOWER_CASE,
    UPPER_CASE,
    MIXED_CASE
  }


  private static final Logger m_logger = Logger.getLogger(DatabaseTools.class);
  private static final String HSQL_DB_NAME = "HSQL Database Engine";
  private static final String MYSQL_DB_NAME = "MySQL";
  private static final String ORACLE_DB_NAME = "Oracle";
  private static final String POSTGRESQL_DB_NAME = "PostgreSQL";
  private static String PRODUCT_NAME;
  private static String DATE_TYPE_NAME;
  private static String FLOAT_TYPE_NAME;
  private static String KEY_TYPE_NAME;
  private static String LONG_TYPE_NAME;
  private static String STRING_TYPE_NAME;
  private static String TEXT_TYPE_NAME;
  private static IdentifierCase IDENTIFIER_CASE;
  private static boolean USES_GENERATED_KEYS;


  static {
    try {
      Connection dbConn = ConnectionSource.getConnection();

      try {
        DatabaseMetaData dbData = dbConn.getMetaData();

        PRODUCT_NAME = dbData.getDatabaseProductName();

        if (PRODUCT_NAME.equals(HSQL_DB_NAME)) {
          DATE_TYPE_NAME = "timestamp";
          FLOAT_TYPE_NAME = "float";
          KEY_TYPE_NAME = "bigint generated by default as identity (start with 1)";
          LONG_TYPE_NAME = "bigint";
          STRING_TYPE_NAME = "varchar";
          TEXT_TYPE_NAME = "longvarchar";
          USES_GENERATED_KEYS = true;
        }
        else if (PRODUCT_NAME.equals(MYSQL_DB_NAME)) {
          DATE_TYPE_NAME = "datetime";
          FLOAT_TYPE_NAME = "float";
          KEY_TYPE_NAME = "bigint auto_increment";
          LONG_TYPE_NAME = "bigint";
          STRING_TYPE_NAME = "varchar";
          TEXT_TYPE_NAME = "longtext";
          USES_GENERATED_KEYS = true;
        }
        else if (PRODUCT_NAME.equals(ORACLE_DB_NAME)) {
          DATE_TYPE_NAME = "date";
          FLOAT_TYPE_NAME = "float";
          KEY_TYPE_NAME = "number(19,0)";
          LONG_TYPE_NAME = "number(19,0)";
          STRING_TYPE_NAME = "varchar2";
          TEXT_TYPE_NAME = "clob";
          USES_GENERATED_KEYS = false;
        }
        else if (PRODUCT_NAME.equals(POSTGRESQL_DB_NAME)) {
          DATE_TYPE_NAME = "timestamp";
          FLOAT_TYPE_NAME = "float4";
          KEY_TYPE_NAME = "int8";
          LONG_TYPE_NAME = "int8";
          STRING_TYPE_NAME = "varchar";
          TEXT_TYPE_NAME = "text";
          USES_GENERATED_KEYS = false;
        }
        else
          m_logger.warn("Unknown database product " + PRODUCT_NAME);

        if (dbData.storesLowerCaseIdentifiers())
          IDENTIFIER_CASE = IdentifierCase.LOWER_CASE;
        else if (dbData.storesUpperCaseIdentifiers())
          IDENTIFIER_CASE = IdentifierCase.UPPER_CASE;
        else
          IDENTIFIER_CASE = IdentifierCase.MIXED_CASE;
      }
      finally {
        dbConn.close();
      }
    }
    catch (Exception err) {
      m_logger.error(err);
    }
  }


  // public methods


  /**
   *
   * @return
   */
  public static String getDbProductName()
  {
    return PRODUCT_NAME;
  }

  /**
   *
   * @return
   */
  public static String getDateTypeName()
  {
    return DATE_TYPE_NAME;
  }

  /**
   *
   * @return
   */
  public static String getFloatTypeName()
  {
    return FLOAT_TYPE_NAME;
  }

  /**
   *
   * @return
   */
  public static String getKeyTypeName()
  {
    return KEY_TYPE_NAME;
  }

  /**
   *
   * @return
   */
  public static String getLongTypeName()
  {
    return LONG_TYPE_NAME;
  }

  /**
   *
   * @return
   */
  public static String getStringTypeName()
  {
    return STRING_TYPE_NAME;
  }

  /**
   *
   * @return
   */
  public static String getTextTypeName()
  {
    return TEXT_TYPE_NAME;
  }

  /**
   *
   * @return
   */
  public static boolean usesGeneratedKeys()
  {
    return USES_GENERATED_KEYS;
  }

  /**
   *
   * @param sequenceName
   * @return
   */
  public static String getNextValuePhrase(String sequenceName)
  {
    if (PRODUCT_NAME.equals(HSQL_DB_NAME))
      return "CALL NEXT VALUE FOR " + sequenceName;
    else if (PRODUCT_NAME.equals(ORACLE_DB_NAME))
      return "SELECT " + sequenceName + ".NEXTVAL FROM DUAL";
    else if (PRODUCT_NAME.equals(POSTGRESQL_DB_NAME))
      return "SELECT NEXTVAL('" + sequenceName + "')";
    else
      return null;
  }

  /**
   *
   * @param dbConn
   * @param table
   * @return
   * @throws SQLException
   */
  public static boolean tableExists(Connection dbConn, String table) throws SQLException
  {
    DatabaseMetaData dbData = dbConn.getMetaData();
    String tableName = convertCase(table);
    ResultSet row = dbData.getTables(null, null, tableName, null);

    try {
      return row.next();
    }
    finally {
      row.close();
    }
  }

  /**
   *
   * @param dbConn
   * @param table
   * @param column
   * @return
   * @throws SQLException
   */
  public static boolean columnExists(Connection dbConn, String table, String column) throws SQLException
  {
    DatabaseMetaData dbData = dbConn.getMetaData();
    String tableName = convertCase(table);
    String columnName = convertCase(column);
    ResultSet row = dbData.getColumns(null, null, tableName, columnName);

    try {
      return row.next();
    }
    finally {
      row.close();
    }
  }

  /**
   *
   * @param dbConn
   * @param table
   * @param column
   * @param type
   * @return
   * @throws SQLException
   */
  public static boolean columnIsType(Connection dbConn, String table, String column, String type) throws SQLException
  {
    DatabaseMetaData dbData = dbConn.getMetaData();
    String tableName = convertCase(table);
    String columnName = convertCase(column);
    ResultSet row = dbData.getColumns(null, null, tableName, columnName);

    try {
      if (!row.next())
        return false;

      String typeName = row.getString(6);

      return typeName.equalsIgnoreCase(type);
    }
    finally {
      row.close();
    }
  }

  /**
   * Initialize the Inca database.
   *
   * @throws HibernateException on database error
   */
  public static void initializeDatabase() throws HibernateException
  {
    Configuration cfg = new Configuration();

    cfg.configure();

    SchemaExport export = new SchemaExport(cfg);

    export.create(false, true);
  }

  /**
   * Delete the Inca database.
   *
   * @throws HibernateException on database error
   * @throws SQLException
   */
  public static void removeDatabase() throws HibernateException, SQLException
  {
    Connection dbConn = ConnectionSource.getConnection();

    try {
      dbConn.setAutoCommit(false);

      dropTables(dbConn, "incaseriesconfigsinstances_");
      dropTables(dbConn, "incainstanceinfo_");
    }
    finally {
      dbConn.close();
    }

    Configuration cfg = new Configuration();

    cfg.configure();

    SchemaExport export = new SchemaExport(cfg);

    export.drop(false, true);
  }


  // private methods


  /**
   *
   * @param value
   * @return
   */
  private static String convertCase(String value)
  {
    if (IDENTIFIER_CASE.equals(IdentifierCase.LOWER_CASE))
      return value.toLowerCase();
    if (IDENTIFIER_CASE.equals(IdentifierCase.UPPER_CASE))
      return value.toUpperCase();
    else
      return value;
  }

  /**
   *
   * @param dbConn
   * @param prefix
   * @throws SQLException
   */
  private static void dropTables(Connection dbConn, String prefix) throws SQLException
  {
    List<String> tableNames = getTableNames(dbConn, prefix);
    Statement dropStmt = dbConn.createStatement();

    try {
      for (String name : tableNames) {
        dropStmt.executeUpdate("DROP TABLE " + name + " CASCADE");

        dbConn.commit();
      }
    }
    finally {
      dropStmt.close();
    }
  }

  /**
   *
   * @param dbConn
   * @return
   * @throws SQLException
   */
  private static List<String> getTableNames(Connection dbConn, String prefix) throws SQLException
  {
    DatabaseMetaData dbData = dbConn.getMetaData();
    String tablePrefix = convertCase(prefix);
    ResultSet row = dbData.getTables(null, null, tablePrefix + "%", null);
    List<String> result = new ArrayList<String>();

    try {
      while (row.next()) {
        if (row.getString(4).equalsIgnoreCase("TABLE"))
          result.add(row.getString(3));
      }

      return result;
    }
    finally {
      row.close();
    }
  }
}