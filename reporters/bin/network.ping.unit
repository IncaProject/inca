#!/usr/bin/env perl

use strict;
use warnings;
use Inca::Reporter::SimpleUnit;
use POSIX 'EINTR';

my ($version) = '$LastChangedRevision: 15264 $' =~ /: (\d+)/;
my $reporter = new Inca::Reporter::SimpleUnit(
  name => 'network.ping.unit',
  description =>
    'Verifies a machine is reachable from source host using BSD ping',
  version => $version,
  unit_name => 'ping'
);

$reporter->addArg( "host", "host to verify connectivity to" );
$reporter->addArg( "count", "number of packets to send", 5 );
$reporter->addArg( "timeout", "timeout the ping command (secs)", 30 );
$reporter->addArg("sleep", "amount of time (s) to wait before retrying telnet", 60 );
$reporter->addArg("retries", "number of retry attempts after a detected failure", 5 );
$reporter->addArg( "verify", "list of hosts used to verify general network connectivity", "" );
$reporter->processArgv( @ARGV );
my $host = $reporter->argValue( "host" );
my $count = $reporter->argValue( "count" );
my $timeout = $reporter->argValue( "timeout" );
my $numtries = $reporter->argValue( "retries" );
my $sleep = $reporter->argValue( "sleep" );
my @verifiers = split(/\s+/, $reporter->argValue( "verify" ));

my $pingOpts = "-q -c";
my $pingCmd = "ping $pingOpts $count $host";
my $output = $reporter->loggedCommandWithRetries( $pingCmd, $timeout, $numtries, $sleep );
if ($? != 0 && $output =~ /Bad option/) {
  $pingOpts = "-n";
  $pingCmd = "ping $pingOpts $count $host";
  $output = $reporter->loggedCommandWithRetries( $pingCmd, $timeout, $numtries, $sleep );
}
my $error = undef;
if ( $? != 0 && $! == EINTR ) {
  $error = "Command '$pingCmd' timed out after $timeout secs";
} elsif ( $? != 0 ) {
  my $exitcode = $? >> 8;
  if ( $exitcode == 1 ) {
    $error = "'$pingCmd' failed with exit status 1: ping does not receive any reply packets at all";
  } elsif ( $exitcode == 2 ) {
    $error = "'$pingCmd' failed with exit status 2: transmission was successful but no responses were received";
  } else {
    $error = "Command '$pingCmd' failed with exit status $exitcode: $output $!";
  }
}

# check the host is not disconnected by verifying a known external host
if (defined $error and scalar(@verifiers) > 0) {
  foreach (@verifiers) {
    $reporter->loggedCommand("ping $pingOpts 5 $_", $sleep);
    failClean( $error ) if $? == 0;
  }
  $reporter->failPrintAndExit("Inca error: network connectivity problem detected on source host");
} elsif ( defined $error ) {
  failClean( $error ); 
}
$reporter->unitSuccess();
$reporter->print();

sub failClean {
  my $err = shift;
  $err =~ s/time \d+/time ##/g;
  $reporter->failPrintAndExit($err);
}
