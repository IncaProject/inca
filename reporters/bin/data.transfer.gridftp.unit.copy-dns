#!/usr/bin/env perl

use strict;
use warnings;
use Inca::Reporter::SimpleUnit;
use POSIX 'EINTR';

my $reporter = new Inca::Reporter::SimpleUnit(
  name => 'data.transfer.gridftp.unit.copy-dns',
  version => 16,
  description => 'Verifies the globus-url-copy service for each host\'s IP address(es)',
  unit_name => 'gridftp_test'
);
$reporter->addDependency('Inca::Reporter::GridProxy');
$reporter->addArg('source', 'URL of source file', '');
$reporter->addArg('dest', 'URL of destination file', '');
$reporter->processArgv(@ARGV);
my $source = $reporter->argValue('source');
my $dest = $reporter->argValue('dest');

if ($source eq ''){
  $source = "file:///tmp/testin.$$";
}
if ($dest eq ''){
  $dest = "file:///tmp/testout.$$";
}
my $tempSource;
if($source =~ m#^file://(.+)# && ! -e $1) {
  $tempSource = $1;
  if (!open(SRC, ">$tempSource")){
    my $pid = $$;
    $tempSource =~ s/$pid/PID/g;
    $reporter->failPrintAndExit("Unable to create $tempSource")
  }
  print SRC "test\n";
  close SRC;
  $reporter->tempFile($tempSource);
  $reporter->tempFile($1) if $dest =~ m#^file://(.+)#;
}
my @ips;
my ($pre, $server, $post) = $dest =~ m/(.*?\/\/)(.[^:|\/]*)(.*)/;
my $noCmd = "[C|c]ommand not found";
my $host = $reporter->loggedCommand("host -n $server");
if($host =~ $noCmd || $?){
  my $err = "Could not resolve $server with \"host\" or \"nslookup\":";
  $host = $reporter->loggedCommand("nslookup -silent $server");
  if($?){
    $reporter->failPrintAndExit("$err $host $!");
  } elsif ($host =~ $noCmd){
    $reporter->failPrintAndExit("$err $host");
  } else{
    $reporter->log("debug", $host);
    my @add=split(/\nName:.[^\n]+\n/,$host);
    for my $add (@add){
      if ($add =~ m/^Address:.[^\n]*/){
        $add =~ s/Address:\s+//;
        $add =~ s/[\s|\n]+//;
        push(@ips, $add);
      }
      if ($add =~ m/^Addresses:.[^\n]*/){
        $add =~ s/Addresses:\s+//;
        my ($ip, $post) = $add =~ m/((\d|\.|\s|\n|,)*)(.*)/; 
        $ip =~ s/\n+/,/g;
        $ip =~ s/\s+//g;
        @ips=split(/,/,$ip);
      }
    }
  }
}else{
  $reporter->log("debug", $host);
  my @add=split(/.* has address /,$host);
  for my $add (@add){
    if ($add =~ m/^\d+.*/){
      my ($ip, $post) = $add =~ m/(.[^\n]*)(.*)/; 
      push(@ips, $ip);
    }
  }
}
if (scalar(@ips)<1){
  $reporter->failPrintAndExit("no IPs for host");
}
my $err="";
@ips = sort( @ips );
for my $ip (@ips){
  # use the IP's hostname instead of the IP if it has one
  my $ipHost = $reporter->loggedCommand("host $ip");
  if(!defined $ipHost || $ipHost =~ $noCmd || $?){
    $ipHost = $reporter->loggedCommand("nslookup -silent $ip");
    if($? == 0 && defined $ipHost && $ipHost !~ $noCmd){
      $reporter->log("debug", $ipHost);
      my ($ipName, $postfix) = $ipHost =~ m/.*name = (.[^\n]*)(\.$)/ms; 
      $ip = $ipName;
    }
  }else{
    $reporter->log("debug", $ipHost);
    my ($ipName, $postfix) = $ipHost =~ m/.* domain name pointer (.[^\n]*)(\.$)/; 
    $ip = $ipName;
  }

  $dest = $pre . $ip . $post;
  my $guc = "globus-url-copy $source $dest";
  my $output = $reporter->loggedCommand($guc, 300);
  if ($? != 0 && $! == EINTR) {
    $err .= "call to \"$guc\" exceeded 5 min\n";
  } elsif ($?) {
    $err .= "$guc failed: $output $!\n";
  } elsif ($output =~ /[E|e]rror/
      || $output =~ /globus-url-copy:.+not found/
      || $output =~ /Can't exec \"globus-url-copy\"/){
    $err .= "\"$guc\" failed: $output\n";
  }
}

if ($err ne ""){
  failClean($err, @ips);
} else {
  $reporter->unitSuccess();
  $reporter->print();
}

sub failClean {
  my $err = shift;
  my @ips = shift;
  $err =~ s/inca\.rm\..[^\s]*/inca\.rm\.PID/g;
  $err =~ s/expired \d+ minutes ago/expired xx minutes ago/g;
  $err =~ s/$$/PID/g;
  $err .= "\n$server mapped to the following ips: @ips";
  $reporter->failPrintAndExit($err);
}
