#!/usr/bin/env perl

use strict;
use warnings;
use Inca::Reporter::SimpleUnit;

my $reporter = new Inca::Reporter::SimpleUnit(
  name => 'grid.middleware.globus.unit.gatekeeper',
  version => 11,
  description =>
    'Checks that a gatekeeper host is accessible with "globusrun -a -r $host" command',
  url => 'http://www.ncsa.uiuc.edu/People/jbasney/teragrid-setup-test.html',
  unit_name => 'remoteLogin'
);
$reporter->addDependency('Inca::Reporter::GridProxy');
$reporter->addArg('host', 'gatekeeper host');
$reporter->addArg( "timeout", "timeout the globusrun command (secs)", 10 );
$reporter->addArg("sleep", "amount of time (s) to wait before retrying cmd", 30 );
$reporter->addArg("retries", "number of retry attempts after a detected failure", 5 );
$reporter->addArg("verify", "list of hosts used to verify general network connectivity", "");
$reporter->processArgv(@ARGV);
my $host = $reporter->argValue('host');
my $timeout = $reporter->argValue( "timeout" );
my $numtries = $reporter->argValue( "retries" );
my $sleep = $reporter->argValue( "sleep" );
my @verifiers = split(/\s+/, $reporter->argValue( "verify" ));

my $cmd = "globusrun -a -r $host";
my $output = $reporter->loggedCommandWithRetries( $cmd, $timeout, $numtries, $sleep );
if($? || $output !~ /GRAM Authentication test successful/) {
  my $errno = $? != 0 ? "$!" : "";
  if (verifyConnectivity(\@verifiers)) {
    my $err = "Executed \"$cmd\". Error: $errno\n$output";
    $err =~ s/t0:p\d+: Fatal error:/t0:pxxxx: Fatal error:/g;
    $reporter->unitFailure($err);
    my $uptime = $reporter->loggedCommand("uptime");
    $reporter->log("info", "Uptime: $uptime");
  } else {
    $reporter->failPrintAndExit("Inca error: network connectivity problem detected on source host");
  }
} else {
  $reporter->unitSuccess();
}
$reporter->print();

sub verifyConnectivity {
  my @verifiers = @{$_[0]};
  my $numVerifiers = scalar(@verifiers);

  if ($numVerifiers == 0) {
    return 1;
  }

  my $pingOpts = "-q -c 5";
  my $pingOutput = $reporter->loggedCommand("ping $pingOpts $verifiers[0]", 60);

  if ($? != 0 && $pingOutput =~ /Bad option/) {
    $pingOpts = "-n 5";

    $reporter->loggedCommand("ping $pingOpts $verifiers[0]", 60);
  }

  my $index = 0;

  while (1) {
    if ($? == 0) {
      return 1;
    }

    if (++$index >= $numVerifiers) {
      last;
    }

    $reporter->loggedCommand("ping $pingOpts $verifiers[$index]", 60);
  }

  return 0;
}
