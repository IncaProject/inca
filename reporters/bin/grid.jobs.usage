#!/usr/bin/env python

from inca.UsageReporter import UsageReporter
import os, sys,re
import dateutil.parser
from datetime import datetime,timedelta

# Workaround for python versions < 2.5
try:
    from collections import defaultdict
except:
    class defaultdict(dict):
        def __init__(self, default_factory=None, *a, **kw):
            if (default_factory is not None and
                not hasattr(default_factory, '__call__')):
                raise TypeError('first argument must be callable')
            dict.__init__(self, *a, **kw)
            self.default_factory = default_factory
        def __getitem__(self, key):
            try:
                return dict.__getitem__(self, key)
            except KeyError:
                return self.__missing__(key)
        def __missing__(self, key):
            if self.default_factory is None:
                raise KeyError(key)
            self[key] = value = self.default_factory()
            return value
        def __reduce__(self):
            if self.default_factory is None:
                args = tuple()
            else:
                args = self.default_factory,
            return type(self), args, None, None, self.items()
        def copy(self):
            return self.__copy__()
        def __copy__(self):
            return type(self)(self.default_factory, self)
        def __deepcopy__(self, memo):
            import copy
            return type(self)(self.default_factory,
                              copy.deepcopy(self.items()))
        def __repr__(self):
            return 'defaultdict(%s, %s)' % (self.default_factory,
                                            dict.__repr__(self))


dn_regx = re.compile(' PID: \d+ -- Notice: 5: Authenticated globus user: (.*)\n')
date_regx = re.compile(' PID: \d+ -- Notice: 6: Got connection \d+\.\d+\.\d+\.\d+ at (.*)\n')

def dn_gen(open_file,begin,end):
  file_length = os.fstat(open_file.fileno()).st_size
  # Binary search to find a time inside the window
  while True:
    line = open_file.readline()
    if not line: break
    if line.startswith('TIME: '):
      t = dateutil.parser.parse(line.replace('TIME: ','').strip())
      if t < begin:
        open_file.seek((file_length - open_file.tell())/2,1)
      else:
        break
  # Rewind by 4k untill we are before the start of the window
  while True:
    line = open_file.readline()
    if not line: break
    if line.startswith('TIME: '):
      t = dateutil.parser.parse(line.replace('TIME: ','').strip())
      if t > begin:
        open_file.seek(-512*1024,1)
      else:
        break
  # Search for relevant lines and return them
  while True:
    line = open_file.readline()
    if not line: 
      break
    datematch = date_regx.match(line)
    if datematch:
      timestamp = dateutil.parser.parse(datematch.groups()[0])
      if timestamp > begin and timestamp < end:
        open_file.readline()
        open_file.readline()
        dnmatch = dn_regx.match(open_file.readline())
        if dnmatch:
          yield dnmatch.groups()[0] 

reporter =  UsageReporter( 
  name = 'grid.jobs.usage',
  version = 9,
  description = 'gathers information about DN usage'
)

reporter.addDependency('dateutil')
reporter.addArg('plaintext', 'do not generate XML, instead generate plain text',0)
reporter.addArg('gatekeeperlog', 'path to gatekeeper log files separated by :', '', '|.*')
reporter.addArg('begin', 'begin time for report in GMT', '', '|.*')
reporter.addArg('end', 'end time for report in GMT', '', '|.*')

reporter.processArgv(sys.argv[1:])

log_filename = reporter.argValue('gatekeeperlog')
if not log_filename:
  log_filename = os.environ['GLOBUS_LOCATION'] + "/var/globus-gatekeeper.log"
beginArg = reporter.argValue('begin')
try:
  begin = dateutil.parser.parse(beginArg)
except ValueError:
  reporter.failPrintAndExit("Begin date not in GMT format: " + beginArg)
if beginArg == '':
  begin = begin - timedelta(1) 
endArg = reporter.argValue('end')
try:
  end = dateutil.parser.parse(endArg)
except ValueError:
  reporter.failPrintAndExit("End date not in GMT format: " + endArg)
if begin > end:
  reporter.failPrintAndExit("Begin date ("+str(begin)+") is greater than end date ("+str(end)+")")
if beginArg == '' and endArg == '':
  reporter.log("system", "Begin date is " + str(begin) + " and end date is " + str(end))

dn_dict = defaultdict(lambda :0)
for log in log_filename.split(':'):
  try:
    fsock = open(log,'r')
    try:
      for dn in dn_gen(fsock,begin,end):
        dn_dict[dn] += 1
    finally:
      fsock.close()
  except IOError:
    reporter.failPrintAndExit("Problem opening " + log)

org_dict = defaultdict(lambda : {'total':0,'unique':0})

for dn in dn_dict:
  reporter.addEntry({'type':'user','name':dn,'stats':{'count':dn_dict[dn]}})
  org = [x for x in dn.split('/') if x.startswith('O=')][0]
  org_dict[org]['total'] += dn_dict[dn]
  org_dict[org]['unique'] += 1

for org in org_dict:
  reporter.addEntry({'type':'org','name':org,'stats':org_dict[org]})

reporter.success()
if reporter.argValue('plaintext') == '1':
  import pprint
  pprint.pprint(dn_dict)
  pprint.pprint(org_dict)
else:
  reporter.printReport()
