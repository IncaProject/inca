#!/usr/bin/env perl

# This test checks that it can run a job through the specified gatekeeper,
# set a variable, and verifies it is set on the resource side.  Because some
# cases may involve submitting through a batch interface, we associate a
# timeout value.  If the job does not return within the specified timeout
# value (e.g., one hour), we consider it to be an error (even though it may be
# just because the queue is super busy; we'll work on a more robust version
# later)

use strict;
use warnings;
use Inca::Reporter::GlobusUnit;

my $reporter = new Inca::Reporter::GlobusUnit(
  name => 'grid.middleware.globus.unit.env',
  description => 'Verifies that a variable FOO can be passed to a job ' .
                 '(utilizes globus-job-submit -env FOO=foo)',
  version => 2,
  url => 'http://www.globus.org',
  unit_name => 'globusEnvFooTest'
);
$reporter->addArg
  ('count', 'add optional host_count parameter to rsl', '', '\d+');
$reporter->addArg('host', 'hostname where gatekeeper is running', '');
$reporter->addArg('service', 'the name of the jobmanager', '');
$reporter->addArg
  ('timeout', 'kill the job after this many minutes', '60', '\d+');
$reporter->processArgv(@ARGV);
my $count = $reporter->argValue('count');
$count = undef if $count eq '';
my $host = $reporter->argValue('host');
$host = undef if $host eq '';
my $service = $reporter->argValue('service');
$service = undef if $service eq '';
my $timeout = $reporter->argValue('timeout');

my ($env,$err) = $reporter->submitJob
  (executable => '/usr/bin/env', service => $service, host => $host,
   count => $count, timeout => $timeout, env => 'FOO=foo');
if(!defined($env) || $env eq '') {
  $reporter->unitFailure('test failed' . (defined($err) ? ": $err" : ''));
} elsif($env !~ /FOO=foo/) {
  $reporter->unitFailure("job completed but result is suspect: $env");
} else {
  $reporter->unitSuccess();
}
$reporter->print();
