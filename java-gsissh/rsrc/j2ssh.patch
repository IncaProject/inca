diff -Naur j2ssh-maverick/pom.xml j2ssh/pom.xml
--- j2ssh-maverick/pom.xml	2016-05-06 07:53:02.000000000 -0700
+++ j2ssh/pom.xml	2019-11-18 13:09:59.000000000 -0800
@@ -35,13 +35,13 @@
 	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
 	<modelVersion>4.0.0</modelVersion>
 	<groupId>com.sshtools</groupId>
-	<artifactId>j2ssh-maverick</artifactId>
+	<artifactId>j2ssh-maverick-gsissh</artifactId>
 	<version>1.5.5</version>
 	<name>J2SSH Maverick</name>
 	<description>Open source SSH2 API</description>
     <url>http://www.sshtools.com</url>
 	<properties>
-		<distributionFileName>j2ssh-maverick-${project.version}</distributionFileName>
+		<distributionFileName>j2ssh-maverick-gsissh-${project.version}</distributionFileName>
 	</properties>
 	<licenses>
 		<license>
@@ -68,11 +68,6 @@
 			<version>2.0.8</version>
 		</dependency>
 		<dependency>
-			<groupId>oro</groupId>
-			<artifactId>oro</artifactId>
-			<version>2.0.8</version>
-		</dependency>
-		<dependency>
 			<groupId>com.jcraft</groupId>
 			<artifactId>jzlib</artifactId>
 			<version>1.1.3</version>
@@ -80,7 +75,7 @@
 		<dependency>
 			<groupId>org.bouncycastle</groupId>
 			<artifactId>bcprov-jdk15on</artifactId>
-			<version>1.52</version>
+			<version>1.61</version>
 		</dependency>
 
 	</dependencies>
@@ -101,8 +96,8 @@
 				<artifactId>maven-compiler-plugin</artifactId>
 				<version>3.1</version>
 				<configuration>
-					<source>1.5</source>
-					<target>1.5</target>
+					<source>1.8</source>
+					<target>1.8</target>
 				</configuration>
 			</plugin>
 			<plugin>
@@ -118,6 +113,7 @@
 					</execution>
 				</executions>
 			</plugin>
+			<!--
 			<plugin>
 				<artifactId>maven-javadoc-plugin</artifactId>
 				<version>2.9.1</version>
@@ -129,10 +125,14 @@
 							<goal>jar</goal>
 						</goals>
 						<configuration>
+			-->
 							<!-- switch on dependency-driven aggregation -->
+			<!--
 							<includeDependencySources>false</includeDependencySources>
 							<dependencySourceIncludes>
+			-->
 								<!-- include ONLY dependencies I control -->
+			<!--
 								<dependencySourceInclude>com.sshtools:*</dependencySourceInclude>
 							</dependencySourceIncludes>
 							<additionalparam>-Xdoclint:none</additionalparam>
@@ -140,6 +140,7 @@
 					</execution>
 				</executions>
 			</plugin>
+			-->
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-gpg-plugin</artifactId>
@@ -162,7 +163,7 @@
 					<descriptors>
 						<descriptor>assembly/bin.xml</descriptor>
 					</descriptors>
-					<finalName>j2ssh-maverick-${project.version}</finalName>
+					<finalName>j2ssh-maverick-gsissh-${project.version}</finalName>
 				</configuration>
 				<version>2.2</version>
 				<executions>
@@ -214,4 +215,4 @@
 			</plugin>
 		</plugins>
 	</build>
-</project>
\ No newline at end of file
+</project>
diff -Naur j2ssh-maverick/src/main/java/com/sshtools/ssh/CommandExecutor.java j2ssh/src/main/java/com/sshtools/ssh/CommandExecutor.java
--- j2ssh-maverick/src/main/java/com/sshtools/ssh/CommandExecutor.java	2016-05-06 07:53:02.000000000 -0700
+++ j2ssh/src/main/java/com/sshtools/ssh/CommandExecutor.java	2019-11-18 13:10:32.000000000 -0800
@@ -31,6 +31,7 @@
  * @author Lee David Painter
  * @deprecated
  */
+@Deprecated
 public class CommandExecutor {
 
 	SshSession session;
diff -Naur j2ssh-maverick/src/main/java/com/sshtools/ssh/SubsystemChannel.java j2ssh/src/main/java/com/sshtools/ssh/SubsystemChannel.java
--- j2ssh-maverick/src/main/java/com/sshtools/ssh/SubsystemChannel.java	2016-05-06 07:53:02.000000000 -0700
+++ j2ssh/src/main/java/com/sshtools/ssh/SubsystemChannel.java	2019-11-18 13:11:04.000000000 -0800
@@ -138,6 +138,7 @@
 	 *             {@link com.sshtools.ssh.Packet}'s as they provide a more
 	 *             efficent way of sending data.
 	 */
+	@Deprecated
 	protected void sendMessage(byte[] msg) throws SshException {
 		try {
 			Packet pkt = createPacket();
diff -Naur j2ssh-maverick/src/main/java/com/sshtools/ssh/components/ComponentManager.java j2ssh/src/main/java/com/sshtools/ssh/components/ComponentManager.java
--- j2ssh-maverick/src/main/java/com/sshtools/ssh/components/ComponentManager.java	2016-05-06 07:53:02.000000000 -0700
+++ j2ssh/src/main/java/com/sshtools/ssh/components/ComponentManager.java	2019-11-18 13:08:08.000000000 -0800
@@ -75,6 +75,7 @@
 	ComponentFactory hmacsCS;
 	ComponentFactory hmacsSC;
 	ComponentFactory keyexchange;
+	ComponentFactory gssApiKeyexchange;
 	ComponentFactory publickeys;
 	ComponentFactory digests;
 	static Object lock = new Object();
@@ -154,6 +155,9 @@
 		keyexchange = new ComponentFactory(SshKeyExchange.class);
 		initializeKeyExchangeFactory(keyexchange);
 
+		gssApiKeyexchange = new ComponentFactory(SshKeyExchange.class);
+		initializeGssApiKeyExchangeFactory(gssApiKeyexchange);
+
 		Log.info(this, "Initializing Secure Random Number Generator");
 		getRND().nextInt();
 	}
@@ -190,6 +194,14 @@
 			ComponentFactory keyexchange);
 
 	/**
+	 * Initialize the SSH2 key exchange factory for GSS API.
+	 * 
+	 * @param keyexchange
+	 */
+	protected abstract void initializeGssApiKeyExchangeFactory(
+			ComponentFactory keyexchange);
+
+	/**
 	 * Initialize the digest factory.
 	 * 
 	 * @param digests
@@ -267,6 +279,18 @@
 	}
 
 	/**
+	 * The supported SSH2 key exchanges for GSS API.
+	 * 
+	 * @return AbstractComponentFactory
+	 */
+	public ComponentFactory supportedGssApiKeyExchanges() {
+		if (PerContextAlgorithmPreferences) {
+			return (ComponentFactory) gssApiKeyexchange.clone();
+		}
+		return gssApiKeyexchange;
+	}
+
+	/**
 	 * The supported public keys
 	 * 
 	 * @return AbstractComponentFactory
diff -Naur j2ssh-maverick/src/main/java/com/sshtools/ssh/components/DiffieHellmanGroups.java j2ssh/src/main/java/com/sshtools/ssh/components/DiffieHellmanGroups.java
--- j2ssh-maverick/src/main/java/com/sshtools/ssh/components/DiffieHellmanGroups.java	2016-05-06 07:53:02.000000000 -0700
+++ j2ssh/src/main/java/com/sshtools/ssh/components/DiffieHellmanGroups.java	2019-11-18 13:08:08.000000000 -0800
@@ -111,7 +111,8 @@
 			+ "2E8EFC14" + "1FBECAA6" + "287C5947" + "4E6BC05D" + "99B2964F"
 			+ "A090C3A2" + "233BA186" + "515BE7ED" + "1F612970" + "CEE2D7AF"
 			+ "B81BDD76" + "2170481C" + "D0069127" + "D5B05AA9" + "93B4EA98"
-			+ "8D8FDDC1" + "86FFB7DC" + "90A6C08F" + "4DF435C9" + "34063199",
+			+ "8D8FDDC1" + "86FFB7DC" + "90A6C08F" + "4DF435C9" + "34063199"
+			+ "FFFFFFFF" + "FFFFFFFF",
 			16);
 
 	public static final BigInteger group17 = new BigInteger("FFFFFFFF"
diff -Naur j2ssh-maverick/src/main/java/com/sshtools/ssh/components/jce/JCEComponentManager.java j2ssh/src/main/java/com/sshtools/ssh/components/jce/JCEComponentManager.java
--- j2ssh-maverick/src/main/java/com/sshtools/ssh/components/jce/JCEComponentManager.java	2016-05-06 07:53:02.000000000 -0700
+++ j2ssh/src/main/java/com/sshtools/ssh/components/jce/JCEComponentManager.java	2019-11-18 13:08:08.000000000 -0800
@@ -394,6 +394,21 @@
 		}
 	}
 
+	protected void initializeGssApiKeyExchangeFactory(ComponentFactory keyexchange) {
+		keyexchange.add(GssApiGroup16Sha512MicV2.ALGORITHM_NAME, GssApiGroup16Sha512MicV2.class);
+		keyexchange.add(GssApiGroup18Sha512MicV2.ALGORITHM_NAME, GssApiGroup18Sha512MicV2.class);
+		keyexchange.add(GssApiGexSha1MicV2.ALGORITHM_NAME, GssApiGexSha1MicV2.class);
+		keyexchange.add(GssApiGroup14Sha256MicV2.ALGORITHM_NAME, GssApiGroup14Sha256MicV2.class);
+		keyexchange.add(GssApiGroup14Sha1MicV2.ALGORITHM_NAME, GssApiGroup14Sha1MicV2.class);
+		keyexchange.add(GssApiGroup1Sha1MicV2.ALGORITHM_NAME, GssApiGroup1Sha1MicV2.class);
+		keyexchange.add(GssApiGroup16Sha512.ALGORITHM_NAME, GssApiGroup16Sha512.class);
+		keyexchange.add(GssApiGroup18Sha512.ALGORITHM_NAME, GssApiGroup18Sha512.class);
+		keyexchange.add(GssApiGexSha1.ALGORITHM_NAME, GssApiGexSha1.class);
+		keyexchange.add(GssApiGroup14Sha256.ALGORITHM_NAME, GssApiGroup14Sha256.class);
+		keyexchange.add(GssApiGroup14Sha1.ALGORITHM_NAME, GssApiGroup14Sha1.class);
+		keyexchange.add(GssApiGroup1Sha1.ALGORITHM_NAME, GssApiGroup1Sha1.class);
+	}
+
 	protected void initializePublicKeyFactory(ComponentFactory publickeys) {
 		publickeys.add("ssh-dss", Ssh2DsaPublicKey.class);
 		publickeys.add("ssh-rsa", Ssh2RsaPublicKey.class);
diff -Naur j2ssh-maverick/src/main/java/com/sshtools/ssh2/Ssh2Context.java j2ssh/src/main/java/com/sshtools/ssh2/Ssh2Context.java
--- j2ssh-maverick/src/main/java/com/sshtools/ssh2/Ssh2Context.java	2016-05-06 07:53:02.000000000 -0700
+++ j2ssh/src/main/java/com/sshtools/ssh2/Ssh2Context.java	2019-11-18 13:08:08.000000000 -0800
@@ -30,6 +30,7 @@
 import com.sshtools.ssh.SshException;
 import com.sshtools.ssh.components.ComponentFactory;
 import com.sshtools.ssh.components.ComponentManager;
+import com.sshtools.ssh.components.jce.GssApiGroup16Sha512MicV2;
 
 /**
  * <p>
@@ -253,6 +254,17 @@
 		}
 	}
 
+	public void useGssApiKeyExchange(boolean use) throws SshException {
+		if (use == true) {
+			keyExchanges = ComponentManager.getInstance().supportedGssApiKeyExchanges();
+			prefKeyExchange = GssApiGroup16Sha512MicV2.ALGORITHM_NAME;
+		}
+		else {
+			keyExchanges = ComponentManager.getInstance().supportedKeyExchanges();
+			prefKeyExchange = KEX_DIFFIE_HELLMAN_ECDH_NISTP_256;
+		}
+	}
+
 	/**
 	 * Get the maximim packet size supported by the transport layer.
 	 * 
diff -Naur j2ssh-maverick/src/main/java/com/sshtools/ssh2/TransportProtocol.java j2ssh/src/main/java/com/sshtools/ssh2/TransportProtocol.java
--- j2ssh-maverick/src/main/java/com/sshtools/ssh2/TransportProtocol.java	2016-05-06 07:53:02.000000000 -0700
+++ j2ssh/src/main/java/com/sshtools/ssh2/TransportProtocol.java	2019-11-18 13:08:08.000000000 -0800
@@ -38,6 +38,7 @@
 import com.sshtools.ssh.SshTransport;
 import com.sshtools.ssh.components.ComponentManager;
 import com.sshtools.ssh.components.Digest;
+import com.sshtools.ssh.components.GssApi;
 import com.sshtools.ssh.components.SshCipher;
 import com.sshtools.ssh.components.SshHmac;
 import com.sshtools.ssh.components.SshKeyExchangeClient;
@@ -179,6 +180,7 @@
 	SshCompression outgoingCompression;
 	SshCompression incomingCompression;
 	SshPublicKey hostkey;
+	GssApi.GssContext gssContext;
 	boolean isIncomingCompressing = false;
 	boolean isOutgoingCompressing = false;
 
@@ -883,6 +885,19 @@
 		return keyExchange;
 	}
 
+	public GssApi.GssContext getGssContext()
+	{
+		return gssContext;
+	}
+
+	public void setGssContext(GssApi.GssContext context)
+	{
+		if (gssContext != null)
+			GssApi.deleteSecContext(gssContext);
+
+		gssContext = context;
+	}
+
 	public static boolean Arrayequals(byte[] a, byte[] a2) {
 		if (a == a2)
 			return true;
@@ -1172,8 +1187,8 @@
 				hostkey = (SshPublicKey) transportContext.supportedPublicKeys()
 						.getInstance(hostKeyAlg);
 
-				if (!(ignoreHostKeyifEmpty && Arrayequals(
-						keyExchange.getHostKey(), "".getBytes()))) {
+				if (!(ignoreHostKeyifEmpty && (keyExchange.getHostKey() == null ||
+						Arrayequals(keyExchange.getHostKey(), "".getBytes())))) {
 
 					EventServiceImplementation.getInstance().fireEvent(
 							(new Event(this,
@@ -1436,6 +1451,12 @@
 			} catch (Throwable t) {
 			}
 		}
+
+		if (gssContext != null) {
+			GssApi.deleteSecContext(gssContext);
+
+			gssContext = null;
+		}
 	}
 
 	void internalDisconnect() {
@@ -1451,6 +1472,12 @@
 			} catch (Throwable t) {
 			}
 		}
+
+		if (gssContext != null) {
+			GssApi.deleteSecContext(gssContext);
+
+			gssContext = null;
+		}
 	}
 
 	void addShutdownHook(Runnable r) {
